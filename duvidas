----- DÚVIDA 1:

Quando eu uso o getc()?
Tipo, pelo que o professor falou, eu vou pegar da fila de recepção. Ok. Mas como eh o sentido dessa parada?

Opção 1:
txqueue -> UART.data.txreg -> UART.data.rxreg -> rxqueue

Opção 2:
txqueue -> UART.data.txreg -> rxqueue -> UART.data.rxreg

Opção 3:
txqueue -> UART.data.txreg -> qualquer lugar do universo.
qualquer outro lugar do universo -> rxqueue -> UART.data.rxreg

Opção 4:
txqueue -> UART.data.txreg -> qualquer lugar do universo.
qualquer outro lugar do universo -> UART.data.rxreg -> rxqueue 

Se for a opção 1, eu vou usar o getc pra pegar da rxqueue, logo, vou usar depois que a transmissão acabou. Então basicamente uso só no programa em C.
Se for a opção 2, eu vou usar o getc pra coordenar a transmissão. Ou seja, eu uso c = getc e o c que eu pegar eu passo pro endereço de recepção da UART.

----- DÚVIDA 2:

Sobre a declaração da estrutura do driver.

-- Declaração 1:

typedef struct UARTdriver {
Tcontrol ctl ; // last control word written to device
Tstatus stat ; // last status word read from device
int nrx ; // number of characters in rx_queue
int rx_hd ; // reception queue head index
int rx_tl ; // reception queue tail index
int ntx ; // number of spaces in tx_queye
int tx_hd ; // transmission queue head index
int tx_tl ; // transmission queue tail index
char rx_q [16]; // reception queue
char tx_q [16]; // transmission queue
int regs [8]; // register save area
} UARTdriver ;

UARTdriver Ud ;

-- Declaração 2:

typedef struct control { // control register fields ( ls byte )
int ign : 24 , // ignore 3 MS bytes
ign567 : 3 , // ignore bits 5..7
intTX : 1 , // interrupt on TX buffer empty ( bit 4)
intRX : 1 , // interrupt on RX buffer full ( bit 3)
speed : 3; // 4 ,8 ,..256 tx - rx data rates ( b0 .. b2 )
} Tcontrol ;

typedef struct status { // status register fields ( only ls byte )
int s ;
} Tstatus ;

# define RXfull 0 x00000020
# define TXempty 0 x00000040

typedef union ctlStat { // control + status on same address
Tcontrol ctl ; // write - only
Tstatus stat ; // read - only
} TctlStat ;

typedef union data { // data registers on same address
int tx ; // write - only
int rx ; // read - only
} Tdata ;

typedef struct serial {
TctlStat cs ; // control & status at address UART + 0
Tdata d ; // TX & RX registers at address UART + 4
} Tserial ;

-- Declaração 3:

typedef struct {
    int nrx;
    int rxhead;
    int rxtail;
    char rxqueue[16];

    int ntx;
    int txhead;
    int txtail;
    char txqueue[16];
} Utype;


Qual eu devo usar? Usar a 2 e a 3? Só a 1? A 1 e a 2? Sei lá.

----- DÚVIDA 3:
O que temos que fazer no assembly?
A princípio eu tinha entendido que era pra fazer o tratador de interrupções (interrHandler). Ainda acho que é isso, mas nas notas de aula tá escrito que foi feito em C, mesmo assim mostra código assembly. A questão é: Foi feito em assembly, compilado para assembly e daí agente vê essa compilação?   Ou foi feito direto em assembly?

----- DÚVIDA 4:
Como funcionam os sinais de interrupção?
Opção 1:
RegCtrl:
intTX fica 1 quando terminei de transmitir um char, ou seja, uART.data.txReg tá vazio e pode receber o próximo da fila.

Opção 2:
RegCtrl:
intTX fica 1 quando quero transmitir um char, ou seja, uART.data.txReg tá cheio e deve mandar pra algum lugar.

----- DÚVIDA 5:
Temos que tratar overrun e framing?

----- DÚVIDA 6:
Como funciona o esquema de ler Status e já zerar overrun, framing, intTx e intRx?
